@model theSite.ViewModels.NewsViewModel
@{
    ViewBag.Title = "Edit";
}

<h3>Edit</h3>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" hidden="hidden">
            @Html.LabelFor(model => model.Detail, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">
               @* @Html.EditorFor(model => model.Detail)
                  @@Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })*@

                @*empty <textare />, used to send updated data*@
                <textarea class="text-box multi-line" id="Detail" name="Detail">
                </textarea>

            </div>
            @*
            <code class="col-md-10" id="Detail">
                @this.Model.Detail
                // ${@this.Model.Detail}
            </code>
            *@

            @*Show raw HTML, to display correctly in editor.
              It will show raw HTML if we use content of @Html.EditroFor(model=>model.Detail)*@
            <div id="rawDetail">
                @Html.Raw(Model.Detail)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <div id="theEditor"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" onclick="setHtmlContent()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval", "~/Content/ueditor/ueditor.config.js", "~/Content/ueditor/ueditor.all.js", "~/Content/UEditor/lang/en/en.js")

    <script type="text/javascript">
        var opts = new Array();
        opts.UEDITOR_HOME_URL = '/Content/ueditor/';
        opts.iframeCssUrl = '/Content/ueditor/themes/iframe.css';
        opts.autoHeightEnabled = true;
        opts.initialFrameHeight = 400;

        // opts.push()
        var editor = UE.getEditor('theEditor', opts, {
            onready: function () {
                // this.setContent('')
                /*var detail = $('#Detail').html();
                this.setContent(detail);
                */
            }
        });

        editor.ready(function () {
            // this.setContent('');
            var d = $('#rawDetail').html();
            this.setContent(d);
            @*editor.execCommand('insertHtml', d); // Same as above*@
        })

        function setHtmlContent() {
            var content = editor.getContent();
            $('#Detail').html(content);
        }

        $(document).ready(function () {
            @*var detail = $('#Detail').html();
            // editor.execCommand('insertHtml', detail);
            editor.setContent(detail);
            *@
        })
    </script>
}