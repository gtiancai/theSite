@model theSite.ViewModels.NewsViewModel
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<div class="link4Action">
    @Html.ActionLink("Back to List", "Index", "News")  |  <label class="label4Btn" for="btnSubmit" onmousedown="setContent()">Create</label>
</div>

<br />

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" hidden="hidden">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Detail)

                @Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Detail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id="theEditor"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnSubmit" type="submit" value="Create" class="btn btn-default" onmousedown="setContent()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval", "~/Content/ueditor/ueditor.config.js", "~/Content/ueditor/ueditor.all.js", "~/Content/UEditor/lang/en/en.js")
    @*//通过路径引入 对ueditor.config.js,ueditor.all.js的引用。
        //可以使用@Script.Render("*.js","*.js")一条语句同时渲染同个javascript文件。生成多个
        <script type="text/javascript" src="*.js"> 文件。*@

    <script type="text/javascript">
        @*初始化一个editor对象，可以直接建立对象的初始化。
        //方法1、初始化一个editor对象， new baidu.editor.ui.editor 新建ueditor对象，*@
        /*
        var editor = new baidu.editor.ui.Editor({
            UEDITOR_HOME_URL:'/Content/ueditor/',//配置编辑器路径   也可以在ueditor.config.js文件中配置。
            iframeCssUrl:'/Content/ueditor/themes/iframe.css',//样式路径
            // initialContent:'欢迎使用ueditor',//初始化编辑器内容
            autoHeightEnabled:true,//高度自动增长
            initialFrameHeight:400  //配置编辑器的初始高度为400px。
        });
        */
        /*var editor = UE.getEditor("UEditor");
        editor.render('Detail');   //将编辑器装入 ID=Content 的文本域中。
        */
        var opts = new Array();
        opts.UEDITOR_HOME_URL = '/Content/ueditor/';
        opts.iframeCssUrl = '/Content/ueditor/themes/iframe.css';
        opts.autoHeightEnabled = true;
        opts.initialFrameHeight = 400;

        // opts.push()
        var editor = UE.getEditor('theEditor', opts, {
            onready: function () {
                // this.setContent('')
        }
        });

        function setContent() {
            var content = editor.getContent();
            $('#Detail').html(content);
        }

        /*
        $(document).ready(function () {
            var detail = $('#Detail').innerHtml;
            editor.setContent(detail);
        })*/

    </script>
}